Claro, aquí tienes una guía paso a paso para manejar el estado usando React Query, con explicaciones concretas y directas. 

### **1. Instalación de React Query**

1. **Instalar React Query:**
   En tu terminal, ejecuta el siguiente comando para instalar React Query:

   ```bash
   npm install @tanstack/react-query
   ```

   O, si usas Yarn:

   ```bash
   yarn add @tanstack/react-query
   ```

### **2. Configuración del Cliente de React Query**

1. **Crear el Cliente:**
   Crea un archivo `queryClient.js` para configurar el cliente de React Query:

   ```jsx
   // src/queryClient.js
   import { QueryClient } from '@tanstack/react-query';

   const queryClient = new QueryClient();

   export default queryClient;
   ```

2. **Configurar el Proveedor:**
   En tu archivo principal (por ejemplo, `index.js`), envuelve tu aplicación con `QueryClientProvider`:

   ```jsx
   // src/index.js
   import React from 'react';
   import ReactDOM from 'react-dom';
   import App from './App';
   import { QueryClientProvider } from '@tanstack/react-query';
   import queryClient from './queryClient';

   ReactDOM.render(
     <QueryClientProvider client={queryClient}>
       <App />
     </QueryClientProvider>,
     document.getElementById('root')
   );
   ```

### **3. Realizar Consultas de Datos con `useQuery`**

1. **Definir la Función de Obtención:**
   Crea una función para obtener datos, por ejemplo, desde una API:

   ```jsx
   // src/api.js
   export const fetchUsers = async () => {
     const response = await fetch('https://jsonplaceholder.typicode.com/users');
     if (!response.ok) {
       throw new Error('Network response was not ok');
     }
     return response.json();
   };
   ```

2. **Usar `useQuery` en un Componente:**
   Utiliza el hook `useQuery` para obtener y manejar datos en un componente:

   ```jsx
   // src/components/UserList.js
   import React from 'react';
   import { useQuery } from '@tanstack/react-query';
   import { fetchUsers } from '../api';

   const UserList = () => {
     const { data, error, isLoading } = useQuery(['users'], fetchUsers);

     if (isLoading) return <p>Loading...</p>;
     if (error) return <p>Error: {error.message}</p>;

     return (
       <ul>
         {data.map(user => (
           <li key={user.id}>{user.name}</li>
         ))}
       </ul>
     );
   };

   export default UserList;
   ```

### **4. Realizar Mutaciones con `useMutation`**

1. **Definir la Función de Mutación:**
   Crea una función para modificar datos, como agregar un usuario:

   ```jsx
   // src/api.js
   export const addUser = async (newUser) => {
     const response = await fetch('https://jsonplaceholder.typicode.com/users', {
       method: 'POST',
       headers: {
         'Content-Type': 'application/json',
       },
       body: JSON.stringify(newUser),
     });
     if (!response.ok) {
       throw new Error('Network response was not ok');
     }
     return response.json();
   };
   ```

2. **Usar `useMutation` en un Componente:**
   Usa `useMutation` para manejar la mutación y actualizar el estado:

   ```jsx
   // src/components/AddUser.js
   import React, { useState } from 'react';
   import { useMutation, useQueryClient } from '@tanstack/react-query';
   import { addUser } from '../api';

   const AddUser = () => {
     const [name, setName] = useState('');
     const queryClient = useQueryClient();
     const mutation = useMutation(addUser, {
       onSuccess: () => {
         queryClient.invalidateQueries(['users']);
       }
     });

     const handleSubmit = (event) => {
       event.preventDefault();
       mutation.mutate({ name });
     };

     return (
       <form onSubmit={handleSubmit}>
         <input
           type="text"
           value={name}
           onChange={(e) => setName(e.target.value)}
           placeholder="Enter user name"
         />
         <button type="submit" disabled={mutation.isLoading}>
           {mutation.isLoading ? 'Adding...' : 'Add User'}
         </button>
         {mutation.isError && <p>Error: {mutation.error.message}</p>}
         {mutation.isSuccess && <p>User added successfully!</p>}
       </form>
     );
   };

   export default AddUser;
   ```

### **5. Configuración Adicional**

1. **Configuración de Cache:**
   Puedes ajustar la configuración del caché usando opciones como `staleTime` para controlar la frecuencia de la actualización de datos:

   ```jsx
   // En el uso de useQuery
   const { data, error, isLoading } = useQuery(['users'], fetchUsers, {
     staleTime: 60000, // Los datos se considerarán frescos durante 60 segundos
   });
   ```

2. **Invalidar Queries:**
   Después de una mutación, invalida las consultas para sincronizar los datos con el servidor:

   ```jsx
   import { useQueryClient } from '@tanstack/react-query';

   const queryClient = useQueryClient();
   const mutation = useMutation(addUser, {
     onSuccess: () => {
       queryClient.invalidateQueries(['users']);
     }
   });
   ```

### **6. Manejo de Errores y Carga**

1. **Mostrar Indicadores de Carga y Errores:**
   Usa `isLoading`, `isError`, y `error` para manejar la UI mientras se cargan los datos o si ocurre un error:

   ```jsx
   if (isLoading) return <p>Loading...</p>;
   if (error) return <p>Error: {error.message}</p>;
   ```

### **Conclusión**

Con React Query, manejas el estado de datos asincrónicos con hooks como `useQuery` para obtener datos y `useMutation` para modificarlos. Esto simplifica la gestión del estado, el manejo de cachés, y el control de errores, haciendo que tu código sea más limpio y eficiente.

Consulta la [documentación oficial de React Query](https://tanstack.com/query/latest/docs/react/overview) para obtener más detalles y avanzadas configuraciones.